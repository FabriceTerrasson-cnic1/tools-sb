#!/bin/bash
# Tunnel OpenSSL bidirectionnel - Port 7777 -> EPP Server
# Utilise openssl s_client qui fonctionne, contrairement Ã  socat OPENSSL

echo "ðŸš€ Tunnel OpenSSL - Port 7777 -> epp.gtld.knet.cn:700"
echo "   Utilise: openssl s_client (testÃ© et fonctionnel)"
echo "   Usage: nc localhost 7777"
echo "   ArrÃªt: Ctrl+C"
echo ""

# CrÃ©e des pipes nommÃ©s pour la communication bidirectionnelle
PIPE_TO_SERVER="/tmp/epp_to_server_$$"
PIPE_TO_CLIENT="/tmp/epp_to_client_$$"

# Nettoie les pipes au dÃ©marrage et Ã  l'arrÃªt
cleanup() {
    echo "ðŸ§¹ Nettoyage..."
    rm -f "$PIPE_TO_SERVER" "$PIPE_TO_CLIENT"
    pkill -P $$ 2>/dev/null
    exit 0
}
trap cleanup EXIT INT TERM

# CrÃ©e les pipes nommÃ©s
mkfifo "$PIPE_TO_SERVER" "$PIPE_TO_CLIENT" 2>/dev/null

echo "ðŸ”§ Pipes crÃ©Ã©s: $PIPE_TO_SERVER, $PIPE_TO_CLIENT"

# DÃ©marre openssl s_client en arriÃ¨re-plan avec connexion permanente
echo "ðŸ”Œ DÃ©marrage connexion SSL vers epp.gtld.knet.cn:700..."
openssl s_client -connect epp.gtld.knet.cn:700 \
    -cert certs/epp.gtld.knet.cn.pem \
    -key certs/epp.gtld.knet.cn.pem \
    -tls1_2 -cipher 'DEFAULT:@SECLEVEL=0' \
    -legacy_server_connect -quiet \
    < "$PIPE_TO_SERVER" > "$PIPE_TO_CLIENT" &

SSL_PID=$!
echo "âœ… OpenSSL PID: $SSL_PID"

# Attendre que la connexion SSL soit Ã©tablie
sleep 2

# DÃ©marre le serveur local avec socat qui utilise les pipes
echo "ðŸ‘‚ Ã‰coute sur localhost:7777..."
socat TCP-LISTEN:7777,reuseaddr,fork \
    SYSTEM:"cat > $PIPE_TO_SERVER & cat < $PIPE_TO_CLIENT; wait" &

SOCAT_PID=$!
echo "âœ… Socat PID: $SOCAT_PID"

echo ""
echo "ðŸŽ¯ Tunnel prÃªt! Test avec:"
echo "   nc localhost 7777"
echo "   echo 'test' | nc localhost 7777"
echo ""

# Attendre que les processus se terminent
wait